package competitionsys.gui.components;

import competitionsys.persistence.Battery;
import competitionsys.persistence.Competition;
import competitionsys.persistence.Match;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

/**
 *
 * @author Michael
 */
public class Batteries extends javax.swing.JPanel {

    ArrayList<Match> matches;
    ArrayList<Battery> batteries;

    int[] manualChange;

    /**
     * Creates new form Batteries
     */
    public Batteries() {
        initComponents();
        matches = Competition.getInstance().getCodeRedSchedule();
        batteries = Competition.getInstance().getBatteries();
        if (matches == null) {
            matches = new ArrayList<>();
        }
        manualChange = new int[2];
        manualChange[0] = -1;
        addMouseListener(new Batteries.MouseListener());
        repaint();
    }

    @Override
    public void paintComponent(Graphics g) {
        Image dbImg = createImage(getWidth(), getHeight());
        Graphics dbg = dbImg.getGraphics();
        draw(dbg);
        g.drawImage(dbImg, 0, 0, this);
    }

    public void draw(Graphics g) {
        if (Competition.getInstance().isMemoryInitialized()) {
            g.setColor(Color.white);
            g.setFont(new Font("Arial", Font.BOLD, 45));
            for (int i = 240; i <= 360; i += 60) {
                g.drawRect(i, 20, 60, 30);
            }

            Match match = matches.get(Competition.getInstance().getNextCodeRedMatch());
            if (match.getBlueStation1() == 2771 || match.getBlueStation2() == 2771
                    || match.getBlueStation3() == 2771) {
                g.setColor(Color.BLUE);
            } else {
                g.setColor(Color.RED);
            }
            g.fillRect(450, 20, 160, 200);
            g.setColor(Color.DARK_GRAY);
            g.fillRect(465, 35, 130, 170);

            int nextMatch = Competition.getInstance().getNextCodeRedMatch();
            FontMetrics metrics = g.getFontMetrics();
            for (int i = nextMatch; i < nextMatch + batteries.size(); i++) {
                int[] pos = convertBattToPos(i - nextMatch);
                Battery battery = batteries.get(wrapIndex(i));
                if (pos[0] == -1) {
                    g.setColor(Color.white);
                    g.drawString(battery.getBatteryLetter(), (130 - metrics.stringWidth(battery.getBatteryLetter())) / 2 + 465, 100);
                    battery.setCharged(false);
                } else {
                    if (pos[0] == manualChange[0] && pos[1] == manualChange[1]) {
                        battery.setCharged(!battery.isCharged());
                        manualChange[0] = -1;
                    } else if (pos[0] == 0 && pos[1] == 0) {
                        battery.setCharged(true);
                    }
                    g.setColor(battery.isCharged() ? Color.green : Color.red);
                    g.fillRect(240 + pos[0] * 60, 50 + pos[1] * 60, 60, 60);
                    g.setColor(Color.white);
                    g.drawString(battery.getBatteryLetter(),
                            (60 - metrics.stringWidth(battery.getBatteryLetter())) / 2 + 240 + pos[0] * 60,
                            95 + pos[1] * 60);
                }
            }

            g.setColor(Color.white);
            for (int x = 240; x <= 360; x += 60) {
                for (int y = 50; y <= 230; y += 60) {
                    g.drawRect(x, y, 60, 60);
                }
            }
        }
    }

    public void refresh() {
        repaint();
    }

    public int[] convertBattToPos(int index) {
        int i = index + Competition.getInstance().getNextCodeRedMatch();
        if (i == 0) {
            int[] a = {-1, 0};
            return a;
        } else {
            index--;
            int[] a = {index % 3, (int) (Math.floor(index / 3))};
            return a;
        }
    }

    private int wrapIndex(int i) {
        return i < batteries.size() ? i : wrapIndex(i - batteries.size());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(832, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(640, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
private class MouseListener extends MouseAdapter implements MouseMotionListener {

        @Override
        public void mousePressed(MouseEvent e) {
            int x = e.getX(), y = e.getY();
            if (x > 240 && x < 300) {
                if (y > 50 && y < 110) {
                    manualChange[0] = 0;
                    manualChange[1] = 0;
                } else if (y > 110 && y < 170) {
                    manualChange[0] = 0;
                    manualChange[1] = 1;
                } else if (y > 170 && y < 230) {
                    manualChange[0] = 0;
                    manualChange[1] = 2;
                } else if (y > 230 && y < 290) {
                    manualChange[0] = 0;
                    manualChange[1] = 3;
                } else {
                    return;
                }
            } else if (x > 300 && x < 360) {
                if (y > 50 && y < 110) {
                    manualChange[0] = 1;
                    manualChange[1] = 0;
                } else if (y > 110 && y < 170) {
                    manualChange[0] = 1;
                    manualChange[1] = 1;
                } else if (y > 170 && y < 230) {
                    manualChange[0] = 1;
                    manualChange[1] = 2;
                } else if (y > 230 && y < 290) {
                    manualChange[0] = 1;
                    manualChange[1] = 3;
                } else {
                    return;
                }
            } else if (x > 360 && x < 420) {
                if (y > 50 && y < 110) {
                    manualChange[0] = 2;
                    manualChange[1] = 0;
                } else if (y > 110 && y < 170) {
                    manualChange[0] = 2;
                    manualChange[1] = 1;
                } else if (y > 170 && y < 230) {
                    manualChange[0] = 2;
                    manualChange[1] = 2;
                } else if (y > 230 && y < 290) {
                    manualChange[0] = 2;
                    manualChange[1] = 3;
                } else {
                    return;
                }
            } else {
                return;
            }
            refresh();
        }

        @Override
        public void mouseMoved(MouseEvent e) {
        }
    }
}
