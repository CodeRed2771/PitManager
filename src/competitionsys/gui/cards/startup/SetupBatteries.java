package competitionsys.gui.cards.startup;

import competitionsys.gui.components.MatchBatterySetup;
import competitionsys.gui.components.MatchScheduleRow;
import competitionsys.persistence.Battery;
import competitionsys.persistence.Competition;
import competitionsys.persistence.Match;
import competitionsys.persistence.startupsequence.StartupSequence;
import java.awt.Dimension;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;

/**
 *
 * @author Michael
 */
public class SetupBatteries extends javax.swing.JPanel {

    private MainStartupCard main;
    private final ArrayList<MatchBatterySetup> rows;
    private Match[] schedule;

    /**
     * Creates new form LoadCompetition
     */
    public SetupBatteries() {
        initComponents();
        rows = new ArrayList<>();
    }

    public void init(MainStartupCard main) {
        this.main = main;
    }

    public void completeSchedule(Match[] schedule) {
        jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.Y_AXIS));
        jPanel1.add(Box.createRigidArea(new Dimension(0, 6)));
        for (Match match : schedule) {
            if (!match.searchFor(2771)) {
                continue;
            }
            MatchBatterySetup mbs = new MatchBatterySetup();
            mbs.setLabels(match);
            jPanel1.add(mbs);
            jPanel1.add(Box.createRigidArea(new Dimension(0, 6)));
            rows.add(mbs);
        }
        this.schedule = schedule;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codeRedLogo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        yes = new javax.swing.JButton();

        setBackground(new java.awt.Color(41, 41, 41));

        codeRedLogo.setBackground(new java.awt.Color(255, 255, 255));
        codeRedLogo.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        codeRedLogo.setForeground(new java.awt.Color(255, 255, 255));
        codeRedLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        codeRedLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/competitionsys/gui/mediumcodered.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Enter a battery letter for each of Code Red's matches:");

        jPanel1.setBackground(new java.awt.Color(20, 20, 20));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1678, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 588, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        yes.setBackground(new java.awt.Color(41, 41, 41));
        yes.setForeground(new java.awt.Color(255, 255, 255));
        yes.setText("CONTINUE");
        yes.setFocusable(false);
        yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(codeRedLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(yes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(codeRedLogo)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(yes)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void yesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesActionPerformed
        File csvBatteries = new File("batteries.csv");
        File csvMatches = new File("matches.csv");
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(csvBatteries));
            csvBatteries.delete();
            csvBatteries.createNewFile();

            for (MatchBatterySetup row : rows) {
                writer.write(row.getBatteryText() + ", true");
                writer.newLine();
            }
            writer.flush();
            writer.close();
            
            csvMatches.delete();
            csvMatches.createNewFile();
            writer = new BufferedWriter(new FileWriter(csvMatches));

            int index = 0;
            for (Match match : schedule) {
                if (match.searchFor(2771)) {
                    match.setBattery(new Battery(rows.get(index).getBatteryText()));
                    index++;
                }
                writer.write(match.getMatchNumber() + ","
                        + match.getRedStation1() + ","
                        + match.getRedStation2() + ","
                        + match.getRedStation3() + ","
                        + match.getBlueStation1() + ","
                        + match.getBlueStation2() + ","
                        + match.getBlueStation3() + ","
                        + match.getBattery().getBatteryLetter() + ","
                        + match.getMatchTime());
                writer.newLine();
            }
            writer.flush();
            writer.close();
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "The event schedule was downloaded from the internet,\n"
                    + "but an error occurred when saving it as CSV data.\n"
                    + "Verify that you do not have batteries.csv or matches.csv\n"
                    + "open in another program.  The information downloaded from\n"
                    + "the internet has been saved in schedule.csv.", "File write error", JOptionPane.ERROR_MESSAGE);
        }
        StartupSequence.loadCSVData();
        main.done();
    }//GEN-LAST:event_yesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel codeRedLogo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton yes;
    // End of variables declaration//GEN-END:variables

}
