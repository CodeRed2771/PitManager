package competitionsys.gui.cards.startup;

import competitionsys.Window;
import competitionsys.persistence.Match;
import competitionsys.persistence.startupsequence.StartupSequence;
import java.awt.CardLayout;
import javax.swing.JOptionPane;

/**
 *
 * @author Michael
 */
public class MainStartupCard extends javax.swing.JPanel {

    private Window window;

    /**
     * Creates new form MainStartupCard
     */
    public MainStartupCard() {
        initComponents();
    }

    public void startup(Window window) {
        this.window = window;
        csvLoadCard.init(this);
        serializationLoadCard.init(this);
        manualSetupCard.init(this);
        scrapeInfoCard.init(this);
        setupBatteriesCard.init(this);

        if (StartupSequence.checkForSerializedData()) {
            CardLayout cl = (CardLayout) (getLayout());
            cl.show(this, "serializationLoadCard");
        } else if (StartupSequence.checkIfCSVDataExists()) {
            CardLayout cl = (CardLayout) (getLayout());
            cl.show(this, "csvLoadCard");
        } else {
            CardLayout cl = (CardLayout) (getLayout());
            cl.show(this, "scrapeInfoCard");
        }
    }

    public void serializationLoadYes() {
        if (StartupSequence.loadSerializedData()) {
            done();
        } else {
            JOptionPane.showMessageDialog(this, "The serialized data file doesn't work\nwith this version of the Pit Manager.", "Version Error", JOptionPane.ERROR_MESSAGE);
            StartupSequence.deleteSerializedData();
            CardLayout cl = (CardLayout) (getLayout());
            cl.show(this, "csvLoadCard");
        }
    }

    public void serializationLoadNo() {
        if (JOptionPane.showConfirmDialog(this, "This will erase the existing data.  Continue?", "Confirm Operation",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            StartupSequence.deleteSerializedData();
            CardLayout cl = (CardLayout) (getLayout());
            if (StartupSequence.checkIfCSVDataExists()) {
                cl.show(this, "csvLoadCard");
            } else {
                cl.show(this, "scrapeInfoCard");
            }
        }
    }

    public void csvLoadYes() {
        if (StartupSequence.loadCSVData()) {
            done();
        } else {
            JOptionPane.showMessageDialog(this, "There was a problem loading the data.", "Loading Error", JOptionPane.ERROR_MESSAGE);
            CardLayout cl = (CardLayout) (getLayout());
            cl.show(this, "scrapeInfoCard");
        }
    }

    public void csvLoadNo() {
        CardLayout cl = (CardLayout) (getLayout());
        cl.show(this, "scrapeInfoCard");
    }

    public void scrapeInfo(String url) {
        if (StartupSequence.scrapeInfo(url)) {
            setupBatteriesCard.completeSchedule(StartupSequence.loadScheduleFile());
            CardLayout cl = (CardLayout) (getLayout());
            cl.show(this, "setupBatteriesCard");
        } else {
            JOptionPane.showMessageDialog(this, "There was a problem downloading the data.\nPlease check that you have a working\ninternet connection and the URL you\nsupplied was valid.", "Download Error", JOptionPane.ERROR_MESSAGE);
            CardLayout cl = (CardLayout) (getLayout());
            cl.show(this, "manualSetupCard");
        }
    }

    public void skipScrapeInfo() {
        CardLayout cl = (CardLayout) (getLayout());
        cl.show(this, "manualSetupCard");
    }

    public void loadManual() {
        setupBatteriesCard.completeSchedule(StartupSequence.loadScheduleFile());
        CardLayout cl = (CardLayout) (getLayout());
        cl.show(this, "setupBatteriesCard");
    }

    public void done() {
        StartupSequence.finish();
        window.switchToMain();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serializationLoadCard = new competitionsys.gui.cards.startup.LoadSerializedInfo();
        csvLoadCard = new competitionsys.gui.cards.startup.LoadCSVInfo();
        scrapeInfoCard = new competitionsys.gui.cards.startup.ScrapeInfo();
        manualSetupCard = new competitionsys.gui.cards.startup.ManualSetup();
        setupBatteriesCard = new competitionsys.gui.cards.startup.SetupBatteries();

        setLayout(new java.awt.CardLayout());
        add(serializationLoadCard, "serialzationLoadCard");
        add(csvLoadCard, "csvLoadCard");
        add(scrapeInfoCard, "scrapeInfoCard");
        add(manualSetupCard, "manualSetupCard");
        add(setupBatteriesCard, "setupBatteriesCard");
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private competitionsys.gui.cards.startup.LoadCSVInfo csvLoadCard;
    private competitionsys.gui.cards.startup.ManualSetup manualSetupCard;
    private competitionsys.gui.cards.startup.ScrapeInfo scrapeInfoCard;
    private competitionsys.gui.cards.startup.LoadSerializedInfo serializationLoadCard;
    private competitionsys.gui.cards.startup.SetupBatteries setupBatteriesCard;
    // End of variables declaration//GEN-END:variables

}
