package competitionsys.gui;

import competitionsys.persistence.Battery;
import competitionsys.persistence.Competition;
import competitionsys.persistence.Match;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.util.ArrayList;

/**
 *
 * @author Michael
 */
public class Batteries extends javax.swing.JPanel {

    ArrayList<Match> matches;
    ArrayList<Battery> batteries;

    /**
     * Creates new form Batteries
     */
    public Batteries() {
        initComponents();
        matches = Competition.getInstance().getCodeRedSchedule();
        batteries = Competition.getInstance().getBatteries();
        if (matches == null) {
            matches = new ArrayList<>();
        }
        repaint();
    }

    @Override
    public void paintComponent(Graphics g) {
        Image dbImg = createImage(getWidth(), getHeight());
        Graphics dbg = dbImg.getGraphics();
        draw(dbg);
        g.drawImage(dbImg, 0, 0, this);
    }

    public void draw(Graphics g) {
        if (Competition.getInstance().isMemoryInitialized()) {
            g.setColor(Color.white);
            g.setFont(new Font("Arial", Font.BOLD, 45));
            for (int i = 240; i <= 360; i += 60) {
                g.drawRect(i, 20, 60, 30);
            }

            Match match = matches.get(Competition.getInstance().getNextCodeRedMatch());
            if (match.getBlueStation1() == 2771 || match.getBlueStation2() == 2771
                    || match.getBlueStation3() == 2771) {
                g.setColor(Color.BLUE);
            } else {
                g.setColor(Color.RED);
            }
            g.fillRect(450, 20, 160, 200);
            g.setColor(Color.DARK_GRAY);
            g.fillRect(465, 35, 130, 170);

            int nextMatch = Competition.getInstance().getNextCodeRedMatch();
            FontMetrics metrics = g.getFontMetrics();
            for (int i = nextMatch; i < nextMatch + batteries.size(); i++) {
                System.out.println("Next Match: " + nextMatch + "\ti: " + i + "\tBatteries Size: "+batteries.size());
                int[] pos = convertBattToPos(i - nextMatch);
                Battery battery = batteries.get(wrapIndex(i));
                if (pos[0] == -1) {
                    g.setColor(Color.white);
                    g.drawString(battery.getBatteryLetter(), (130 - metrics.stringWidth(battery.getBatteryLetter())) / 2 + 465, 100);
                } else {
                    g.setColor(battery.isCharged() ? Color.green : Color.red);
                    g.fillRect(240 + pos[0] * 60, 50 + pos[1] * 60, 60, 60);
                    g.setColor(Color.white);
                    g.drawString(battery.getBatteryLetter(),
                            (60 - metrics.stringWidth(battery.getBatteryLetter())) / 2 + 240 + pos[0] * 60,
                            95 + pos[1] * 60);
                }
            }

            g.setColor(Color.white);
            for (int x = 240; x <= 360; x += 60) {
                for (int y = 50; y <= 230; y += 60) {
                    g.drawRect(x, y, 60, 60);
                }
            }
        }
    }

    public void refresh() {
        repaint();
    }

    public int[] convertBattToPos(int index) {
        int i = index + Competition.getInstance().getNextCodeRedMatch();
        System.out.println("i: " + i);
        if (i == 0) {
            int[] a = {-1, 0};
            return a;
        } else {
            index--;
            int[] a = {index % 3, (int) (Math.floor(index / 3))};
            return a;
        }
    }

    private int wrapIndex(int i) {
        return i < batteries.size() ? i : wrapIndex(i - batteries.size());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/competitionsys/gui/battery.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("BATTERIES");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 618, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 415, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

}
